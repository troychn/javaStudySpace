<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:p="http://www.springframework.org/schema/p"
       xmlns:context="http://www.springframework.org/schema/context"
       xmlns:jee="http://www.springframework.org/schema/jee" xmlns:tx="http://www.springframework.org/schema/tx"
       xmlns:aop="http://www.springframework.org/schema/aop" xmlns:cache="http://www.springframework.org/schema/cache"
       xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd
            http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context.xsd http://www.springframework.org/schema/cache http://www.springframework.org/schema/cache/spring-cache.xsd">

    <context:property-placeholder location="classpath:config/redis.properties"/>

    <!--<context:component-scan base-package="com.troylc.nettyDemoredis"/>-->

    <!-- ========手动整合redis 不利用spring-data-redis整合===start===== -->
    <bean id="jedisPoolConfig" class="redis.clients.jedis.JedisPoolConfig">
        <!-- 连接池中最大连接数。高版本：maxTotal，低版本：maxActive -->
        <property name="maxTotal" value="300"/>
        <!-- 连接池中最大空闲的连接数. -->
        <property name="maxIdle" value="200"/>
        <!-- 连接池中最少空闲的连接数. -->
        <property name="minIdle" value="0" />
        <!-- 对于“空闲链接”检测线程而言，每次检测的链接资源的个数。默认为3
        <property name="numTestsPerEvictionRun" value="1024"/>-->
        <!-- “空闲链接”检测线程，检测的周期，毫秒数。如果为负值，表示不运行“检测线程”。默认为-1.
        <property name="timeBetweenEvictionRunsMillis" value="30000"/>-->
        <!-- 连接空闲的最小时间，达到此值后空闲连接将可能会被移除。负值(-1)表示不移除.
        <property name="minEvictableIdleTimeMillis" value="-1"/>-->
       <!-- 在minEvictableIdleTimeMillis基础上，加入了至少minIdle个对象已经在pool里面了。
       如果为-1，evicted不会根据idle time驱逐任何对象。如果minEvictableIdleTimeMillis>0，
       则此项设置无意义，且只有在timeBetweenEvictionRunsMillis大于0时才有意义；
        <property name="softMinEvictableIdleTimeMillis" value="10000"/>-->
        <!-- 当连接池资源耗尽时，调用者最大阻塞的时间，超时将跑出异常。单位，毫秒数;默认为-1.
        表示永不超时。高版本：maxWaitMillis，低版本：maxWait
        获取连接时的最大等待毫秒数(如果设置为阻塞时BlockWhenExhausted),如果超时就抛异常, 小于零:阻塞不确定的时间,  默认-1-->
        <property name="maxWaitMillis" value="1500"/>
        <!-- testOnBorrow:向调用者输出“链接”资源时，是否检测是有有效，如果无效则从连接池中移除，
        并尝试获取继续获取。默认为false。建议保持默认值. -->
        <property name="testOnBorrow" value="false"/>
        <!-- testWhileIdle:向调用者输出“链接”对象时，是否检测它的空闲超时；默认为false。
        如果“链接”空闲超时，将会被移除。建议保持默认值. -->
        <property name="testWhileIdle" value="true"/>
        <!-- testOnReturn:向连接池“归还”链接时，是否检测“链接”对象的有效性。默认为false。建议保持默认值.-->
        <property name="testOnReturn" value="false"/>
        <!--是否启用pool的jmx管理功能, 默认true-->
        <property name="jmxEnabled" value="true"/>
        <!--默 认为"pool", JMX不熟,具体不知道是干啥的...默认就好.-->
        <property name="jmxNamePrefix" value="youyuan"/>
        <!--连接耗尽时是否阻塞, false报异常,ture阻塞直到超时, 默认true-->
        <property name="blockWhenExhausted" value="false"/>
        <!-- whenExhaustedAction:当“连接池”中active数量达到阀值时，即“链接”资源耗尽时，
        连接池需要采取的手段, 默认为1(0:抛出异常。1:阻塞，直到有可用链接资源。2:强制创建新的链接资源) -->
    </bean>

    <bean id="shardedJedisPool" class="redis.clients.jedis.ShardedJedisPool">
        <constructor-arg index="0" ref="jedisPoolConfig"/>
        <constructor-arg index="1">
            <list>
                <bean name="slaver" class="redis.clients.jedis.JedisShardInfo">
                    <constructor-arg index="0" value="${redis.host}"/>
                    <constructor-arg index="1" value="${redis.port}" type="int"/>
                </bean>
                <bean name="master" class="redis.clients.jedis.JedisShardInfo">
                    <constructor-arg index="0" value="${redis.host}"/>
                    <constructor-arg index="1" value="${redis.port}" type="int"/>
                </bean>
            </list>
        </constructor-arg>
    </bean>

    <!-- ========手动整合redis 不利用spring-data-redis整合===end===== -->



    <!-- ========利用spring-data-redis整合===
    com.troylc.nettyDemoredis.CacheConfig 主要是解决缓存Key生成策略被覆盖的问题=============start===== -->

    <!-- 开启缓存注解 -->
    <cache:annotation-driven/>

    <!-- Redis sentinel集群配置 -->
    <bean id="sentinelConfig" class="org.springframework.data.redis.connection.RedisSentinelConfiguration">
        <constructor-arg index="0" type="java.lang.String" value="master001"/>
        <constructor-arg index="1" type="java.util.Set">
            <set>
                <value>${redis.host}:${redis.port}</value>
                <value>${redis.host}:${redis.port}</value>
                <value>${redis.host}:${redis.port}</value>
            </set>
        </constructor-arg>
    </bean>

    <!-- Spring提供的Redis连接工厂 -->
    <bean id="jedisConnectionFactory" class="org.springframework.data.redis.connection.jedis.JedisConnectionFactory"
          destroy-method="destroy">
        <!-- Redis sentinel集群配置 -->
        <constructor-arg index="0" type="org.springframework.data.redis.connection.RedisSentinelConfiguration"
                         ref="sentinelConfig"/>
        <!-- 连接池配置. -->
        <constructor-arg index="1" type="redis.clients.jedis.JedisPoolConfig" ref="jedisPoolConfig"/>

        <!-- Redis服务主机. -->
        <property name="hostName" value="${redis.host}"/>
        <!-- Redis服务端口号. -->
        <property name="port" value="${redis.port}"/>
        <!-- Redis服务连接密码. -->
        <!-- <property name="password" value="${redis.password}" /> -->
        <!-- 连超时设置. -->
        <property name="timeout" value="15000"/>
        <!-- 是否使用连接池. -->
        <property name="usePool" value="false"/>
    </bean>

    <!-- Serializer -->
    <bean id="keySerializer" class="org.springframework.data.redis.serializer.StringRedisSerializer"/>
   <!-- <bean id="valueSerializer" class="com.troylc.nettyDemoredis.GenericJackson2JsonRedisSerializer" />-->
    <bean id="valueSerializer" class="org.springframework.data.redis.serializer.GenericJackson2JsonRedisSerializer" />

    <!-- redisTemplate模板 -->
    <bean id="redisTemplate" class="org.springframework.data.redis.core.StringRedisTemplate">
        <property name="connectionFactory" ref="jedisConnectionFactory" />
        <property name="keySerializer" ref="keySerializer"/>
        <property name="valueSerializer" ref="valueSerializer"/>
    </bean>



    <!-- redis缓存管理器 -->
    <bean id="cacheManager" class="org.springframework.data.redis.cache.RedisCacheManager">
        <constructor-arg ref="redisTemplate" />
    </bean>

    <!-- ========利用spring-data-redis整合================end===== -->
</beans>