<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:aop="http://www.springframework.org/schema/aop"
       xmlns:tx="http://www.springframework.org/schema/tx"
       xmlns:jpa="http://www.springframework.org/schema/data/jpa"
       xmlns:jdbc="http://www.springframework.org/schema/jdbc"
       xmlns:context="http://www.springframework.org/schema/context"
       xsi:schemaLocation="
      http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context.xsd
      http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd
      http://www.springframework.org/schema/jdbc http://www.springframework.org/schema/jdbc/spring-jdbc.xsd
      http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx.xsd
      http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop.xsd
      http://www.springframework.org/schema/data/jpa http://www.springframework.org/schema/data/jpa/spring-jpa.xsd"
       default-lazy-init="true">
    <description>SpringJpa配置</description>

    <context:annotation-config />
    <!-- spring启动时扫描项目路径下的properties文件,后续用${key }
    方式取出对应值,这样可以代码解耦和，后续只需修改properties文件即可 -->
    <context:property-placeholder location="classpath*:config/*.properties"/>

    <!-- 如果spring用了jpa，并且类型为LocalContainerEntityManagerFactoryBean，则组件注册在此配置文件出现即可，
    其余配置文件可忽略 使用component来替代annotation 自动注册bean, 并保证@Required、@Autowired的属性被注入\ -->
    <context:component-scan base-package="com.troylc.nettyDemo">
        <context:exclude-filter type="annotation"
                                expression="org.springframework.stereotype.Controller"/>
    </context:component-scan>

    <!-- 定义实体管理器工厂
         Jpa配置   LocalContainerEntityManagerFactoryBean这个选项Spring扮演了容器的角色。完全掌管JPA
         spring生成EntityManagerFactory的三种方式 : http://www.cnblogs.com/beiyeren/archive/2013/01/23/2873210.html
         -->
    <bean id="entityManagerFactory" class="org.springframework.orm.jpa.LocalContainerEntityManagerFactoryBean">
        <!-- 指定数据源 -->
        <property name="dataSource" ref="dataSource"/>
        <!-- 指定Jpa持久化实现厂商类,这里以Hibernate为例 -->
        <property name="jpaVendorAdapter" ref="hibernateJpaVendorAdapter"/>
        <!-- 指定Entity实体类包路径 -->
        <property name="packagesToScan">
            <array><value>com.troylc.nettyDemo.domain</value></array>
        </property>
        <!-- 指定JPA属性；如Hibernate中指定是否显示SQL的是否显示、方言等 -->
        <property name="jpaProperties">
            <props>
                <prop key="hibernate.dialect">org.hibernate.dialect.MySQL5Dialect</prop>
                <prop key="hibernate.ejb.naming_strategy">org.hibernate.cfg.ImprovedNamingStrategy</prop>
                <prop key="hibernate.cache.provider_class">org.hibernate.cache.NoCacheProvider</prop>
                <prop key="hibernate.show_sql">true</prop>
                <prop key="hibernate.format_sql">true</prop>
                <prop key="hibernate.hbm2ddl.auto">validate</prop>
            </props>
        </property>
    </bean>
    <!-- 重要配置：启用扫描并自动创建代理的功能  -->
    <jpa:repositories base-package="com.troylc.nettyDemo.dao" transaction-manager-ref="transactionManager"
                      entity-manager-factory-ref="entityManagerFactory"/>
    <!-- Hibernate对Jpa的实现 -->
    <bean id="hibernateJpaVendorAdapter" class="org.springframework.orm.jpa.vendor.HibernateJpaVendorAdapter"/>
    <!-- Jpa 事务管理器  -->
    <bean id="transactionManager" class="org.springframework.orm.jpa.JpaTransactionManager">
        <property name="entityManagerFactory" ref="entityManagerFactory"/>
    </bean>
    <!-- 开启注解事务 -->
    <tx:annotation-driven transaction-manager="transactionManager" proxy-target-class="true"/>

    <!-- 配置数据源 C3p0 -->
    <bean id="dataSource" class="com.mchange.v2.c3p0.ComboPooledDataSource">
        <property name="maxIdleTime" value="${mysqlc3p0.maxIdleTime}" />

        <property name="driverClass" value="${jdbc.driverClassName}" />
        <property name="jdbcUrl" value="${jdbc.url}"/>
        <property name="user" value="${jdbc.username}" />
        <property name="password" value="${jdbc.password}" />

        <property name="maxPoolSize" value="${mysqlc3p0.maxPoolSize}" />
        <property name="minPoolSize" value="${mysqlc3p0.minPoolSize}" />
        <property name="idleConnectionTestPeriod" value="${mysqlc3p0.idleConnectionTestPeriod}" />
        <property name="acquireIncrement" value="${mysqlc3p0.acquireIncrement}" />
        <property name="initialPoolSize" value="${mysqlc3p0.initialPoolSize}" />
        <property name="maxStatements" value="${mysqlc3p0.maxStatements}" />
        <property name="maxStatementsPerConnection" value="${mysqlc3p0.maxStatementsPerConnection}" />
        <property name="acquireRetryAttempts" value="${mysqlc3p0.acquireRetryAttempts}" />
        <property name="breakAfterAcquireFailure" value="${mysqlc3p0.breakAfterAcquireFailure}" />
        <property name="testConnectionOnCheckout" value="${mysqlc3p0.testConnectionOnCheckout}" />
        <property name="unreturnedConnectionTimeout" value="${mysqlc3p0.unreturnedConnectionTimeout}" />
        <property name="debugUnreturnedConnectionStackTraces" value="${mysqlc3p0.debugUnreturnedConnectionStackTraces}" />
    </bean>
    <!-- 启动对@AspectJ（面向切面）注解的支持 -->
    <aop:aspectj-autoproxy/>

    <!-- 配置spring线程池来异步处理上报xml解析，并存入数据库或者缓存redis -->
    <bean id="taskExecutor" class="org.springframework.scheduling.concurrent.ThreadPoolTaskExecutor">
        <!--核心线程数-->
        <property name="corePoolSize" value="300"/>
        <!--最大线程数-->
        <property name="maxPoolSize" value="500"/>
        <!-- 队列最大长度>=mainExecutor.maxSize || maxPoolSize-->
        <property name="queueCapacity" value="1000"/>
        <!-- 线程池维护线程所允许的空闲时间 -->
        <property name="keepAliveSeconds" value="300"/>
        <!--  线程池对拒绝任务 (无线程可用 ) 的处理策略 -->
        <property name="rejectedExecutionHandler">
            <bean class="java.util.concurrent.ThreadPoolExecutor$CallerRunsPolicy"/>
        </property>
    </bean>

</beans>